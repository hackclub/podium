// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { RequestLoginRequestLoginPostData, RequestLoginRequestLoginPostError, RequestLoginRequestLoginPostResponse, VerifyTokenVerifyGetData, VerifyTokenVerifyGetError, VerifyTokenVerifyGetResponse, GetEventEventsAdminEventIdGetData, GetEventEventsAdminEventIdGetError, GetEventEventsAdminEventIdGetResponse, GetEventAttendeesEventsAdminEventIdAttendeesGetData, GetEventAttendeesEventsAdminEventIdAttendeesGetError, GetEventAttendeesEventsAdminEventIdAttendeesGetResponse, RemoveAttendeeEventsAdminEventIdRemoveAttendeePostData, RemoveAttendeeEventsAdminEventIdRemoveAttendeePostError, RemoveAttendeeEventsAdminEventIdRemoveAttendeePostResponse, GetEventLeaderboardEventsAdminEventIdLeaderboardGetData, GetEventLeaderboardEventsAdminEventIdLeaderboardGetError, GetEventLeaderboardEventsAdminEventIdLeaderboardGetResponse, GetEventVotesEventsAdminEventIdVotesGetData, GetEventVotesEventsAdminEventIdVotesGetError, GetEventVotesEventsAdminEventIdVotesGetResponse, GetEventReferralsEventsAdminEventIdReferralsGetData, GetEventReferralsEventsAdminEventIdReferralsGetError, GetEventReferralsEventsAdminEventIdReferralsGetResponse, GetEventEventsEventIdGetData, GetEventEventsEventIdGetError, GetEventEventsEventIdGetResponse, UpdateEventEventsEventIdPutData, UpdateEventEventsEventIdPutError, UpdateEventEventsEventIdPutResponse, DeleteEventEventsEventIdDeleteData, DeleteEventEventsEventIdDeleteError, DeleteEventEventsEventIdDeleteResponse, GetAttendingEventsEventsGetError, GetAttendingEventsEventsGetResponse, CreateEventEventsPostData, CreateEventEventsPostError, CreateEventEventsPostResponse, AttendEventEventsAttendPostData, AttendEventEventsAttendPostError, AttendEventEventsAttendPostResponse, VoteEventsVotePostData, VoteEventsVotePostError, VoteEventsVotePostResponse, GetEventProjectsEventsEventIdProjectsGetData, GetEventProjectsEventsEventIdProjectsGetError, GetEventProjectsEventsEventIdProjectsGetResponse, GetAtIdEventsIdSlugGetData, GetAtIdEventsIdSlugGetError, GetAtIdEventsIdSlugGetResponse, GetProjectsProjectsMineGetError, GetProjectsProjectsMineGetResponse, CreateProjectProjectsPostData, CreateProjectProjectsPostError, CreateProjectProjectsPostResponse, JoinProjectProjectsJoinPostData, JoinProjectProjectsJoinPostError, JoinProjectProjectsJoinPostResponse, UpdateProjectProjectsProjectIdPutData, UpdateProjectProjectsProjectIdPutError, UpdateProjectProjectsProjectIdPutResponse, DeleteProjectProjectsProjectIdDeleteData, DeleteProjectProjectsProjectIdDeleteError, DeleteProjectProjectsProjectIdDeleteResponse, GetProjectProjectsProjectIdGetData, GetProjectProjectsProjectIdGetError, GetProjectProjectsProjectIdGetResponse, StartProjectCheckProjectsCheckStartPostData, StartProjectCheckProjectsCheckStartPostError, StartProjectCheckProjectsCheckStartPostResponse, PollProjectCheckProjectsCheckCheckIdGetData, PollProjectCheckProjectsCheckCheckIdGetError, PollProjectCheckProjectsCheckCheckIdGetResponse, UserExistsUsersExistsGetData, UserExistsUsersExistsGetError, UserExistsUsersExistsGetResponse, GetCurrentUserInfoUsersCurrentGetError, GetCurrentUserInfoUsersCurrentGetResponse, UpdateCurrentUserUsersCurrentPutData, UpdateCurrentUserUsersCurrentPutError, UpdateCurrentUserUsersCurrentPutResponse, GetUserPublicUsersUserIdGetData, GetUserPublicUsersUserIdGetError, GetUserPublicUsersUserIdGetResponse, CreateUserUsersPostData, CreateUserUsersPostError, CreateUserUsersPostResponse } from './types.gen';

export const client = createClient(createConfig());

export class AuthService {
    /**
     * Request Login
     * Send a magic link to the user's email. If the user has not yet signed up, an error will be raised
     */
    public static requestLoginRequestLoginPost<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<RequestLoginRequestLoginPostData, ThrowOnError>) {
        return (options?.client ?? client).post<RequestLoginRequestLoginPostResponse, RequestLoginRequestLoginPostError, ThrowOnError>({
            ...options,
            url: '/request-login'
        });
    }
    
    /**
     * Verify Token
     * Verify a login token and return an access token and user object
     */
    public static verifyTokenVerifyGet<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<VerifyTokenVerifyGetData, ThrowOnError>) {
        return (options?.client ?? client).get<VerifyTokenVerifyGetResponse, VerifyTokenVerifyGetError, ThrowOnError>({
            ...options,
            url: '/verify'
        });
    }
    
}

export class EventsService {
    /**
     * Get Event
     */
    public static getEventEventsAdminEventIdGet<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetEventEventsAdminEventIdGetData, ThrowOnError>) {
        return (options?.client ?? client).get<GetEventEventsAdminEventIdGetResponse, GetEventEventsAdminEventIdGetError, ThrowOnError>({
            ...options,
            url: '/events/admin/{event_id}'
        });
    }
    
    /**
     * Get Event Attendees
     * Get the attendees of an event
     */
    public static getEventAttendeesEventsAdminEventIdAttendeesGet<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetEventAttendeesEventsAdminEventIdAttendeesGetData, ThrowOnError>) {
        return (options?.client ?? client).get<GetEventAttendeesEventsAdminEventIdAttendeesGetResponse, GetEventAttendeesEventsAdminEventIdAttendeesGetError, ThrowOnError>({
            ...options,
            url: '/events/admin/{event_id}/attendees'
        });
    }
    
    /**
     * Remove Attendee
     */
    public static removeAttendeeEventsAdminEventIdRemoveAttendeePost<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<RemoveAttendeeEventsAdminEventIdRemoveAttendeePostData, ThrowOnError>) {
        return (options?.client ?? client).post<RemoveAttendeeEventsAdminEventIdRemoveAttendeePostResponse, RemoveAttendeeEventsAdminEventIdRemoveAttendeePostError, ThrowOnError>({
            ...options,
            url: '/events/admin/{event_id}/remove-attendee'
        });
    }
    
    /**
     * Get Event Leaderboard
     * Get the leaderboard for an event (admin only)
     */
    public static getEventLeaderboardEventsAdminEventIdLeaderboardGet<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetEventLeaderboardEventsAdminEventIdLeaderboardGetData, ThrowOnError>) {
        return (options?.client ?? client).get<GetEventLeaderboardEventsAdminEventIdLeaderboardGetResponse, GetEventLeaderboardEventsAdminEventIdLeaderboardGetError, ThrowOnError>({
            ...options,
            url: '/events/admin/{event_id}/leaderboard'
        });
    }
    
    /**
     * Get Event Votes
     * Get all votes for an event (admin only)
     */
    public static getEventVotesEventsAdminEventIdVotesGet<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetEventVotesEventsAdminEventIdVotesGetData, ThrowOnError>) {
        return (options?.client ?? client).get<GetEventVotesEventsAdminEventIdVotesGetResponse, GetEventVotesEventsAdminEventIdVotesGetError, ThrowOnError>({
            ...options,
            url: '/events/admin/{event_id}/votes'
        });
    }
    
    /**
     * Get Event Referrals
     * Get all referrals for an event (admin only)
     */
    public static getEventReferralsEventsAdminEventIdReferralsGet<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetEventReferralsEventsAdminEventIdReferralsGetData, ThrowOnError>) {
        return (options?.client ?? client).get<GetEventReferralsEventsAdminEventIdReferralsGetResponse, GetEventReferralsEventsAdminEventIdReferralsGetError, ThrowOnError>({
            ...options,
            url: '/events/admin/{event_id}/referrals'
        });
    }
    
    /**
     * Get Event
     * Get a public event by its ID. For admin features, use the admin endpoints.
     */
    public static getEventEventsEventIdGet<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetEventEventsEventIdGetData, ThrowOnError>) {
        return (options?.client ?? client).get<GetEventEventsEventIdGetResponse, GetEventEventsEventIdGetError, ThrowOnError>({
            ...options,
            url: '/events/{event_id}'
        });
    }
    
    /**
     * Update Event
     * Update event's information
     */
    public static updateEventEventsEventIdPut<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateEventEventsEventIdPutData, ThrowOnError>) {
        return (options?.client ?? client).put<UpdateEventEventsEventIdPutResponse, UpdateEventEventsEventIdPutError, ThrowOnError>({
            ...options,
            url: '/events/{event_id}'
        });
    }
    
    /**
     * Delete Event
     */
    public static deleteEventEventsEventIdDelete<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteEventEventsEventIdDeleteData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteEventEventsEventIdDeleteResponse, DeleteEventEventsEventIdDeleteError, ThrowOnError>({
            ...options,
            url: '/events/{event_id}'
        });
    }
    
    /**
     * Get Attending Events
     * Get a list of all events that the current user is attending.
     */
    public static getAttendingEventsEventsGet<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetAttendingEventsEventsGetResponse, GetAttendingEventsEventsGetError, ThrowOnError>({
            ...options,
            url: '/events/'
        });
    }
    
    /**
     * Create Event
     * Create a new event. The current user is automatically added as an owner of the event.
     */
    public static createEventEventsPost<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateEventEventsPostData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateEventEventsPostResponse, CreateEventEventsPostError, ThrowOnError>({
            ...options,
            url: '/events/'
        });
    }
    
    /**
     * Attend Event
     * Attend an event. The client must supply a join code that matches the event's join code.
     */
    public static attendEventEventsAttendPost<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<AttendEventEventsAttendPostData, ThrowOnError>) {
        return (options?.client ?? client).post<AttendEventEventsAttendPostResponse, AttendEventEventsAttendPostError, ThrowOnError>({
            ...options,
            url: '/events/attend'
        });
    }
    
    /**
     * Vote
     * Vote for the top 3 projects in an event. The client must provide the event ID and a list of the top 3 projects. If there are less than 20 projects in the event, only the top 2 projects are required.
     */
    public static voteEventsVotePost<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<VoteEventsVotePostData, ThrowOnError>) {
        return (options?.client ?? client).post<VoteEventsVotePostResponse, VoteEventsVotePostError, ThrowOnError>({
            ...options,
            url: '/events/vote'
        });
    }
    
    /**
     * Get Event Projects
     * Get the projects for a specific event in a random order
     */
    public static getEventProjectsEventsEventIdProjectsGet<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetEventProjectsEventsEventIdProjectsGetData, ThrowOnError>) {
        return (options?.client ?? client).get<GetEventProjectsEventsEventIdProjectsGetResponse, GetEventProjectsEventsEventIdProjectsGetError, ThrowOnError>({
            ...options,
            url: '/events/{event_id}/projects'
        });
    }
    
    /**
     * Get At Id
     * Get an event's Airtable ID by its slug.
     */
    public static getAtIdEventsIdSlugGet<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetAtIdEventsIdSlugGetData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAtIdEventsIdSlugGetResponse, GetAtIdEventsIdSlugGetError, ThrowOnError>({
            ...options,
            url: '/events/id/{slug}'
        });
    }
    
}

export class ProjectsService {
    /**
     * Get Projects
     * Get the current user's projects and projects they are collaborating on.
     */
    public static getProjectsProjectsMineGet<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetProjectsProjectsMineGetResponse, GetProjectsProjectsMineGetError, ThrowOnError>({
            ...options,
            url: '/projects/mine'
        });
    }
    
    /**
     * Create Project
     * Create a new project. The current user is automatically added as an owner of the project.
     */
    public static createProjectProjectsPost<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateProjectProjectsPostData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateProjectProjectsPostResponse, CreateProjectProjectsPostError, ThrowOnError>({
            ...options,
            url: '/projects/'
        });
    }
    
    /**
     * Join Project
     */
    public static joinProjectProjectsJoinPost<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<JoinProjectProjectsJoinPostData, ThrowOnError>) {
        return (options?.client ?? client).post<JoinProjectProjectsJoinPostResponse, JoinProjectProjectsJoinPostError, ThrowOnError>({
            ...options,
            url: '/projects/join'
        });
    }
    
    /**
     * Update Project
     * Update a project by replacing it
     */
    public static updateProjectProjectsProjectIdPut<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateProjectProjectsProjectIdPutData, ThrowOnError>) {
        return (options?.client ?? client).put<UpdateProjectProjectsProjectIdPutResponse, UpdateProjectProjectsProjectIdPutError, ThrowOnError>({
            ...options,
            url: '/projects/{project_id}'
        });
    }
    
    /**
     * Delete Project
     */
    public static deleteProjectProjectsProjectIdDelete<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteProjectProjectsProjectIdDeleteData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteProjectProjectsProjectIdDeleteResponse, DeleteProjectProjectsProjectIdDeleteError, ThrowOnError>({
            ...options,
            url: '/projects/{project_id}'
        });
    }
    
    /**
     * Get Project
     */
    public static getProjectProjectsProjectIdGet<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetProjectProjectsProjectIdGetData, ThrowOnError>) {
        return (options?.client ?? client).get<GetProjectProjectsProjectIdGetResponse, GetProjectProjectsProjectIdGetError, ThrowOnError>({
            ...options,
            url: '/projects/{project_id}'
        });
    }
    
    /**
     * Start Project Check
     * Start an asynchronous project check
     */
    public static startProjectCheckProjectsCheckStartPost<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<StartProjectCheckProjectsCheckStartPostData, ThrowOnError>) {
        return (options?.client ?? client).post<StartProjectCheckProjectsCheckStartPostResponse, StartProjectCheckProjectsCheckStartPostError, ThrowOnError>({
            ...options,
            url: '/projects/check/start'
        });
    }
    
    /**
     * Poll Project Check
     * Poll the status of a project check
     */
    public static pollProjectCheckProjectsCheckCheckIdGet<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PollProjectCheckProjectsCheckCheckIdGetData, ThrowOnError>) {
        return (options?.client ?? client).get<PollProjectCheckProjectsCheckCheckIdGetResponse, PollProjectCheckProjectsCheckCheckIdGetError, ThrowOnError>({
            ...options,
            url: '/projects/check/{check_id}'
        });
    }
    
}

export class UsersService {
    /**
     * User Exists
     */
    public static userExistsUsersExistsGet<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UserExistsUsersExistsGetData, ThrowOnError>) {
        return (options?.client ?? client).get<UserExistsUsersExistsGetResponse, UserExistsUsersExistsGetError, ThrowOnError>({
            ...options,
            url: '/users/exists'
        });
    }
    
    /**
     * Get Current User Info
     */
    public static getCurrentUserInfoUsersCurrentGet<ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetCurrentUserInfoUsersCurrentGetResponse, GetCurrentUserInfoUsersCurrentGetError, ThrowOnError>({
            ...options,
            url: '/users/current'
        });
    }
    
    /**
     * Update Current User
     * Update the current user's information
     */
    public static updateCurrentUserUsersCurrentPut<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateCurrentUserUsersCurrentPutData, ThrowOnError>) {
        return (options?.client ?? client).put<UpdateCurrentUserUsersCurrentPutResponse, UpdateCurrentUserUsersCurrentPutError, ThrowOnError>({
            ...options,
            url: '/users/current'
        });
    }
    
    /**
     * Get User Public
     */
    public static getUserPublicUsersUserIdGet<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetUserPublicUsersUserIdGetData, ThrowOnError>) {
        return (options?.client ?? client).get<GetUserPublicUsersUserIdGetResponse, GetUserPublicUsersUserIdGetError, ThrowOnError>({
            ...options,
            url: '/users/{user_id}'
        });
    }
    
    /**
     * Create User
     */
    public static createUserUsersPost<ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateUserUsersPostData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateUserUsersPostResponse, CreateUserUsersPostError, ThrowOnError>({
            ...options,
            url: '/users/'
        });
    }
    
}